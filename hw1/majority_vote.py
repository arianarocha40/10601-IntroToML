# -*- coding: utf-8 -*-
"""hw1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fFOaISd2QuOHM2lrenhXaQyQqzlgWvMX
"""

"""
Name: Ariana Rocha
AndrewID: afrocha
Class: 10601
Assignment: HW1
Due Date: 22JAN2025
Date Submitted: 22JAN2025
"""

import sys
from collections import Counter

##DB for testing in collab purposes ONLY
# sys.argv = [
#     "majority_vote.py",                # Script name
#     "/content/heart_train.tsv",         # Heart training data
#     "/content/heart_test.tsv",         # Heart test data
#     "/content/heart_train_labels.txt",  # Heart training predictions
#     "/content/heart_test_labels.txt",   # Heart test predictions
#     "/content/heart_metrics.txt"       # Heart metrics
# ]

# sys.argv = [
#     "majority_vote.py",   # Script name
#     "/content/education_train.tsv",    # Training input
#     "/content/education_test.tsv",    # Testing input
#     "/content/education_train_labels.txt",     # Training predictions output
#     "/content/education_test_labels.txt",    # Testing predictions output
#     "/content/education_metrics.txt"    # Metrics output
# ]


def train_majority_label(train_input):
    """
    Identify the majority label from the training dataset.
    -Reads the traning data file.
    -Extracts the lables (last column of each row).
    -Counts occurrences of each label.
    -returns the most comon label, using the numerically higher label in case of a tie.
    """
    ## DeBug(DB): Indicate the file being read
    # print(f"Reading training data from: {train_input}")

    with open(train_input, 'r') as file:
        ##Skip the header row and extract labels for training
        labels = [line.strip().split('\t')[-1] for line in file.readlines()[1:]]

    ##DB: Indicate the number of labels read
    # print(f"Total labels in training data: {len(labels)}")

    ##Count occurrences of each label
    label_counts = Counter(labels)

    ## DB: Print the counts of each label
    # print(f"Label counts: {label_counts}")

    ##Determine the majority label (numerically higher in case of a tie)
    majority_label = max(label_counts.items(), key=lambda x: (x[1], x[0]))[0]

    ##DB: Indicate the majority label
    # print(f"Majority label: {majority_label}")
    return majority_label

def predict_and_write(data_input, output_file, majority_label):
    """
    Write predictiosn based on the majority label to the output file.
    - Reads the input file to determine the number of rows (excluding the header).
    -writes the majority label for all rows to the spec OP file.
    """
    ##DB: Indicate the input file being read
    # print(f"Predicting for data in: {data_input}")

    with open(data_input, 'r') as file:
        # Count the number of data rows (excluding the header row)
        num_rows = len(file.readlines()) - 1

    # #DB: Indicate the number of rows to predict
    # print(f"Number of rows in {data_input}: {num_rows}")

    # Write the majority label to the output file
    with open(output_file, 'w') as file:
        file.write((majority_label + '\n') * num_rows)

    ##DB: Indicate completion of writing predictions
    # print(f"Finished writing predictions to: {output_file}")

def calculate_error(data_input, majority_label):
    """
    Calculate the error rate for the dataset based on the majority label.
    -reads the input file and extracts the labels (last colunm of each row).
    - Compares the extracted labels with the majority label.
    -Returns the fraction of incorect predictions.
    """
    # #DB: Indicate the file being processed for error calculation
    # print(f"Calculating error for data in: {data_input}")

    with open(data_input, 'r') as file:
        # Skip the header row and extract labels
        labels = [line.strip().split('\t')[-1] for line in file.readlines()[1:]]

    # #DB: Indicate the total number of labels
    # print(f"Total labels in {data_input}: {len(labels)}")

    # Count incorrect predictions
    incorrect = sum(1 for label in labels if label != majority_label)
    error_rate = incorrect / len(labels)

    ##DB: Indicate the calculated error rate
    # print(f"Error rate for {data_input}: {error_rate:.6f}")
    return error_rate

if __name__ == "__main__":
    # #DB: Print the received arguments
    # print("Arguments received:", sys.argv)

    # Ensure the correct number of arguments are provided
    if len(sys.argv) < 6:
        print("Usage: python majority_vote.py <train_input> <test_input> <train_output> <test_output> <metrics_output>")
        sys.exit(1)

    # Parse command-line arguments
    train_input = sys.argv[1]
    test_input = sys.argv[2]
    train_output = sys.argv[3]
    test_output = sys.argv[4]
    metrics_output = sys.argv[5]

    ##DB: Print the file paths for confirmation
    # print(f"Train input file: {train_input}")
    # print(f"Test input file: {test_input}")
    # print(f"Train output file: {train_output}")
    # print(f"Test output file: {test_output}")
    # print(f"Metrics output file: {metrics_output}")

    # Step 1: Train to find the majority label
    majority_label = train_majority_label(train_input)

    # Step 2: Predict for training and test datasets
    predict_and_write(train_input, train_output, majority_label)
    predict_and_write(test_input, test_output, majority_label)

    # Step 3: Calculate error rates
    train_error = calculate_error(train_input, majority_label)
    test_error = calculate_error(test_input, majority_label)

    # Step 4: Write metrics to the metrics file
    # Debug: Indicate the metrics file being written
    # print(f"Writing metrics to: {metrics_output}")
    with open(metrics_output, 'w') as file:
        file.write(f"error(train): {train_error:.6f}\n")
        file.write(f"error(test): {test_error:.6f}\n")
    ##Debug: Confirm completion of writing metrics
    # print("Metrics written successfully.")